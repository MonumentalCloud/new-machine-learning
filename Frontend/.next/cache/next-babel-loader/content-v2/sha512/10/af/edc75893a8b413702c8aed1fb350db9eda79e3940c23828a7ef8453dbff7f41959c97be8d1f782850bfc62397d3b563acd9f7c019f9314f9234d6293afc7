{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/marvinisawesome/Downloads/My Website Project/Postman Hackathon/Frontend/ez-machine-learning/component/layer/layer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styles from './layer.module.css';\nimport { FormGroup, Form, Input } from 'reactstrap';\nexport default function Layer(props) {\n  _s();\n\n  var _useState = useState(0),\n      node = _useState[0],\n      setNode = _useState[1];\n\n  var _useState2 = useState('relu'),\n      activation = _useState2[0],\n      setActivation = _useState2[1];\n\n  var handleNode = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var value;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              value = parseInt(e.target.value);\n\n              if (value) {\n                if (value > 100) {\n                  setNode(10);\n                } else if (value < 0) {\n                  setNode(0);\n                } else {\n                  setNode(value);\n                }\n              } else {\n                setNode(0);\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleNode(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: styles.layer,\n      children: /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \" form-control-label\",\n          htmlFor: \"example-number-input\",\n          children: \"Number of Nodes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          defaultValue: \"0\",\n          id: \"node-input\",\n          type: \"number\",\n          value: node,\n          onChange: handleNode,\n          max: 100,\n          min: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, props.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Layer, \"n6clPUkY6lPQ2DpJFYCTdkz+GUo=\");\n\n_c = Layer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layer\");","map":{"version":3,"sources":["/Users/marvinisawesome/Downloads/My Website Project/Postman Hackathon/Frontend/ez-machine-learning/component/layer/layer.js"],"names":["React","useState","styles","FormGroup","Form","Input","Layer","props","node","setNode","activation","setActivation","handleNode","e","preventDefault","value","parseInt","target","container","layer","key"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,QAAuC,YAAvC;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AAAA,kBACTN,QAAQ,CAAC,CAAD,CADC;AAAA,MAC1BO,IAD0B;AAAA,MACpBC,OADoB;;AAAA,mBAEGR,QAAQ,CAAC,MAAD,CAFX;AAAA,MAE1BS,UAF0B;AAAA,MAEdC,aAFc;;AAIjC,MAAMC,UAAU;AAAA,wEAAG,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfA,cAAAA,CAAC,CAACC,cAAF;AACMC,cAAAA,KAFS,GAEDC,QAAQ,CAACH,CAAC,CAACI,MAAF,CAASF,KAAV,CAFP;;AAGf,kBAAGA,KAAH,EAAU;AACN,oBAAGA,KAAK,GAAE,GAAV,EAAe;AACXN,kBAAAA,OAAO,CAAC,EAAD,CAAP;AACH,iBAFD,MAEO,IAAGM,KAAK,GAAG,CAAX,EAAa;AAChBN,kBAAAA,OAAO,CAAC,CAAD,CAAP;AACH,iBAFM,MAEA;AACHA,kBAAAA,OAAO,CAACM,KAAD,CAAP;AACH;AACJ,eARD,MAQO;AACHN,gBAAAA,OAAO,CAAC,CAAD,CAAP;AACH;;AAbc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVG,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAiBA,sBACI;AAAqB,IAAA,SAAS,EAAEV,MAAM,CAACgB,SAAvC;AAAA,2BAEI,QAAC,IAAD;AAAM,MAAA,SAAS,EAAEhB,MAAM,CAACiB,KAAxB;AAAA,6BACA,QAAC,SAAD;AAAA,gCACA;AAAO,UAAA,SAAS,EAAC,qBAAjB;AAAuC,UAAA,OAAO,EAAC,sBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAIA;AAAA;AAAA;AAAA;AAAA,gBAJA,eAKA,QAAC,KAAD;AACI,UAAA,YAAY,EAAC,GADjB;AAEI,UAAA,EAAE,EAAC,YAFP;AAGI,UAAA,IAAI,EAAC,QAHT;AAII,UAAA,KAAK,EAAEX,IAJX;AAKI,UAAA,QAAQ,EAAEI,UALd;AAMI,UAAA,GAAG,EAAE,GANT;AAOI,UAAA,GAAG,EAAE;AAPT;AAAA;AAAA;AAAA;AAAA,gBALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAFJ,KAAUL,KAAK,CAACa,GAAhB;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH;;GA5CuBd,K;;KAAAA,K","sourcesContent":["import React, {useState} from 'react';\nimport styles from './layer.module.css';\nimport { FormGroup, Form, Input } from 'reactstrap';\n\nexport default function Layer(props) {\n    const [node, setNode] = useState(0);\n    const [activation, setActivation] = useState('relu');\n\n    const handleNode = async (e) => {\n        e.preventDefault(); \n        const value = parseInt(e.target.value);\n        if(value) {\n            if(value> 100) {\n                setNode(10);\n            } else if(value < 0){\n                setNode(0);\n            } else {\n                setNode(value);\n            }\n        } else {\n            setNode(0);\n        }\n\n    }\n\n    return (\n        <div key={props.key} className={styles.container}>\n\n            <Form className={styles.layer}>\n            <FormGroup>\n            <label className=\" form-control-label\" htmlFor=\"example-number-input\">\n                Number of Nodes\n            </label>\n            <br />\n            <Input\n                defaultValue=\"0\"\n                id=\"node-input\"\n                type=\"number\"\n                value={node}\n                onChange={handleNode}\n                max={100}\n                min={0}\n\n            ></Input>\n            </FormGroup>\n        </Form>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}