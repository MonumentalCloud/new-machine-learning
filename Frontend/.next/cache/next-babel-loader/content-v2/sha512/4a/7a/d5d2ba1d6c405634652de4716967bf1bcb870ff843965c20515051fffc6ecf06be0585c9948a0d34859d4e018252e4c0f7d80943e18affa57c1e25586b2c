{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marvinisawesome/Downloads/My Website Project/Postman Hackathon/Frontend/ez-machine-learning/component/Convolutional/convolutional.js\";\nimport styles from './convolutional.module.css';\nimport React, { useState } from 'react';\nimport { FormGroup, Form, Input } from 'reactstrap';\nexport default function Convolutional(props) {\n  const {\n    0: activation,\n    1: setActivation\n  } = useState('relu');\n  const {\n    0: kernelSize,\n    1: setKernelSize\n  } = useState(1);\n  const {\n    0: stride,\n    1: setStride\n  } = useState(1);\n\n  const onChange = () => {\n    const current = props.json;\n    current[props.number] = {\n      'convolutional': [activation, kernelSize, stride]\n    };\n    props.set(current);\n    console.log(current);\n  };\n\n  const handleActivation = e => {\n    setActivation(e.target.value);\n    onChange();\n  };\n\n  const handleKernel = e => {\n    const value = parseInt(e.target.value);\n\n    if (value) {\n      if (value > 100) {\n        setKernelSize(10);\n      } else if (value < 1) {\n        setKernelSize(1);\n      } else {\n        setKernelSize(value);\n      }\n    } else {\n      setKernelSize(1);\n    }\n\n    onChange();\n  };\n\n  const handleStride = e => {\n    if (e.target.value > poolSize) {\n      alert('Stride cannot be bigger than kernel size!');\n    } else {\n      setStride(e.target.value);\n      onChange();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: styles.layer,\n      children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \" form-control-label\",\n          htmlFor: \"example-number-input\",\n          children: [\"Kernel Size: \", kernelSize, \" X \", kernelSize]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          defaultValue: \"0\",\n          id: \"node-input\",\n          type: \"number\",\n          value: kernelSize,\n          onChange: handleKernel,\n          max: 100,\n          min: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \" form-control-label\",\n          htmlFor: \"example-number-input\",\n          children: \"Stride Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          defaultValue: \"0\",\n          id: \"node-input\",\n          type: \"number\",\n          value: stride,\n          onChange: handleStride,\n          max: 10,\n          min: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, props.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/marvinisawesome/Downloads/My Website Project/Postman Hackathon/Frontend/ez-machine-learning/component/Convolutional/convolutional.js"],"names":["styles","React","useState","FormGroup","Form","Input","Convolutional","props","activation","setActivation","kernelSize","setKernelSize","stride","setStride","onChange","current","json","number","set","console","log","handleActivation","e","target","value","handleKernel","parseInt","handleStride","poolSize","alert","container","layer","key"],"mappings":"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","sourcesContent":["import styles from './convolutional.module.css';\nimport React, {useState} from 'react';\nimport { FormGroup, Form, Input } from 'reactstrap';\n\nexport default function Convolutional(props) {\n    const [activation, setActivation] = useState('relu');    \n    const [kernelSize, setKernelSize] = useState(1);\n    const [stride, setStride] = useState(1);\n\n    const onChange = () => {\n        const current = props.json;\n        current[props.number] = {'convolutional': [activation, kernelSize, stride]};\n        props.set(current);\n        console.log(current);\n    }\n\n    const handleActivation = (e) => {\n        setActivation(e.target.value);\n        onChange();\n    }\n    const handleKernel = (e) => {\n        const value = parseInt(e.target.value);\n        if(value) {\n            if(value> 100) {\n                setKernelSize(10);\n            } else if(value < 1){\n                setKernelSize(1);\n            } else {\n                setKernelSize(value);\n            }\n        } else {\n            setKernelSize(1);\n        }\n        onChange();\n    }\n\n    const handleStride = (e) => {\n        if(e.target.value > poolSize) {\n            alert('Stride cannot be bigger than kernel size!')\n        } else {\n\n            setStride(e.target.value);\n            onChange();\n        }\n    }\n\n    return (\n        <div key={props.key} className={styles.container}>\n\n            <Form className={styles.layer}>\n                <FormGroup>\n                <label className=\" form-control-label\" htmlFor=\"example-number-input\">\n                    Kernel Size: {kernelSize} X {kernelSize}\n                </label>\n                <br />\n                <Input\n                    defaultValue=\"0\"\n                    id=\"node-input\"\n                    type=\"number\"\n                    value={kernelSize}\n                    onChange={handleKernel}\n                    max={100}\n                    min={0}\n\n                ></Input>\n                </FormGroup>\n                <FormGroup>\n                <label className=\" form-control-label\" htmlFor=\"example-number-input\">\n                    Stride Size\n                </label>\n                <br />\n                <Input\n                    defaultValue=\"0\"\n                    id=\"node-input\"\n                    type=\"number\"\n                    value={stride}\n                    onChange={handleStride}\n                    max={10}\n                    min={0}\n\n                ></Input>\n                </FormGroup>\n        </Form>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}